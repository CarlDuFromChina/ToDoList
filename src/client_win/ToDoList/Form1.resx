<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA2IYwAEUAAADejTQA3ow0AN+NNADjkjYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAOGSNwD/v08A66E/AP//ywD6t0sA55o7AOicPADhjzQAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADklTgAAAAAAO2jQADpnT0o66E/kuugPm7kljkJ6Js8AOicPADejTMAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        wAD//+AA///wAf//+AP///wH//////////8=
</value>
  </data>
</root>